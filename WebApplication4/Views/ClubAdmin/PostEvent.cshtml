@model WebApplication4.Models.PostEventViewModel

@{
    ViewBag.Title = "Post Event to Website";
    Layout = "~/Views/Shared/_ClubadminLayout.cshtml";
}

<div class="container mt-2 form-container">
    <div class="card shadow-lg p-3 event-card">
        <h4 class="text-center mb-3">Post Event to Website</h4>

        @if (!string.IsNullOrEmpty(ViewBag.Message))
        {
            <p style="color: green;">@ViewBag.Message</p>
        }

        @using (Html.BeginForm("PostEvent", "ClubAdmin", FormMethod.Post, new { enctype = "multipart/form-data", id = "postEventForm" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.EventID)

            <div class="row g-2">
                <!-- Row 1: Read-only fields -->
                <div class="col-md-3 form-group">
                    @Html.LabelFor(m => m.EventName)
                    @Html.TextBoxFor(m => m.EventName, new { @class = "form-control", @readonly = "readonly" })
                </div>
                <div class="col-md-3 form-group">
                    @Html.LabelFor(m => m.ClubName)
                    @Html.TextBoxFor(m => m.ClubName, new { @class = "form-control", @readonly = "readonly" })
                </div>
                <div class="col-md-3 form-group">
                    @Html.LabelFor(m => m.EventStartDateAndTime)
                    @Html.TextBoxFor(m => m.EventStartDateAndTime, "{0:yyyy-MM-ddTHH:mm}", new { @type = "datetime-local", @class = "form-control", @readonly = "readonly" })
                </div>
                <div class="col-md-3 form-group">
                    @Html.LabelFor(m => m.EventEndDateAndTime)
                    @Html.TextBoxFor(m => m.EventEndDateAndTime, "{0:yyyy-MM-ddTHH:mm}", new { @type = "datetime-local", @class = "form-control", @readonly = "readonly" })
                </div>

                <!-- Row 2: Event Description (read-only) -->
                <div class="col-md-12 form-group">
                    @Html.LabelFor(m => m.EventDescription)
                    @Html.TextAreaFor(m => m.EventDescription, new { @class = "form-control", rows = 3, @readonly = "readonly" })
                </div>

                <!-- Row 3: Event Poster (read-only, show only) -->
                <div class="col-md-6 form-group">
                    <label>Event Poster</label>
                    @if (!string.IsNullOrEmpty(Model.EventPoster))
                    {
                        <div class="image-preview mt-1">
                            <img src="@Model.EventPoster" alt="Event Poster" style="max-width: 200px; max-height: 200px; object-fit: contain; border: 1px solid #ccc; padding: 2px;" />
                        </div>
                    }
                </div>


                <!-- Event Banner (Editable) -->
                <div class="col-md-6 form-group">
                    <label for="EventBannerFile">Event Banner (Image)</label>
                    <input type="file" name="EventBannerFile" id="EventBannerFile" class="form-control" accept="image/*" />
                    <div class="image-preview mt-1">
                        @if (!string.IsNullOrEmpty(Model.EventBanner))
                        {
                            <img id="bannerPreview" src="@Model.EventBanner" alt="Event Banner" style="max-width: 200px; max-height: 100px;" />
                        }
                        else
                        {
                            <img id="bannerPreview" style="display:none; max-width: 200px; max-height: 100px;" />
                        }
                    </div>
                </div>

                <!-- Row 4: Venue (read-only), Registration URL & Organizer Name (editable) -->
                <div class="col-md-4 form-group">
                    @Html.LabelFor(m => m.Venue)
                    @Html.TextBoxFor(m => m.Venue, new { @class = "form-control", @readonly = "readonly" })
                </div>
                <div class="col-md-4 form-group">
                    @Html.LabelFor(m => m.RegistrationURL)
                    @Html.TextBoxFor(m => m.RegistrationURL, new { @class = "form-control", type = "url" })
                </div>
                <div class="col-md-4 form-group">
                    @Html.LabelFor(m => m.OrganizerName)
                    @Html.TextBoxFor(m => m.OrganizerName, new { @class = "form-control" })
                </div>

                <!-- Submit -->
                <div class="col-md-12 text-center mt-3">
                    <button type="submit" class="btn btn-primary">Submit Event</button>
                </div>
            </div>
        }

        @if (!string.IsNullOrEmpty(ViewBag.Message))
        {
            <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                @ViewBag.Message
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const form = document.getElementById("postEventForm");
            const banner = document.getElementById("EventBannerFile");
            const regUrl = document.getElementById("RegistrationURL");
            const organizer = document.getElementById("OrganizerName");

            // Create or get preview image element
            let bannerPreview = document.getElementById("bannerPreview");
            if (!bannerPreview) {
                bannerPreview = document.createElement("img");
                bannerPreview.id = "bannerPreview";
                bannerPreview.style.maxWidth = "200px";
                bannerPreview.style.maxHeight = "100px";
                bannerPreview.style.display = "none";
                banner.parentElement.appendChild(bannerPreview);
            }

            // Live preview on file select
            banner.addEventListener("change", function (e) {
                const file = e.target.files[0];
                if (file) {
                    const reader = new FileReader();
                    reader.onload = function (ev) {
                        bannerPreview.src = ev.target.result;
                        bannerPreview.style.display = "block";
                    }
                    reader.readAsDataURL(file);
                } else {
                    bannerPreview.src = "";
                    bannerPreview.style.display = "none";
                }
            });

            form.addEventListener("submit", function (e) {
                let valid = true;

                // Validate Registration URL
                try {
                    new URL(regUrl.value);
                } catch {
                    alert("Please enter a valid Registration URL.");
                    valid = false;
                }

                // Validate Organizer Name
                if (!organizer.value || organizer.value.trim().length < 3) {
                    alert("Organizer Name must be at least 3 characters.");
                    valid = false;
                }

                // Validate Banner
                const file = banner.files[0];
                if (!file) {
                    alert("Event Banner is required.");
                    valid = false;
                }

                if (!valid) e.preventDefault();
            });
        });
    </script>
}


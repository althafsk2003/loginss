@model WebApplication4.Models.PostEventViewModel

@{
    ViewBag.Title = "Post Event to Website";
    Layout = "~/Views/Shared/_ClubadminLayout.cshtml";
}

<div class="container mt-2 form-container">
    <div class="card shadow-lg p-3 event-card">
        <h4 class="text-center mb-3">Post Event to Website</h4>

        @if (!string.IsNullOrEmpty(ViewBag.Message))
        {
            <p style="color: green;">@ViewBag.Message</p>
        }

        @using (Html.BeginForm("PostEvent", "ClubAdmin", FormMethod.Post, new { enctype = "multipart/form-data", id = "postEventForm" }))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(m => m.EventID)

            <div class="row g-2">
                <!-- Row 1 -->
                <div class="col-md-3 form-group">
                    @Html.LabelFor(m => m.EventName, new { @class = "form-label" })
                    @Html.TextBoxFor(m => m.EventName, new { @class = "form-control form-control-custom", @readonly = "readonly" })
                </div>
                <div class="col-md-3 form-group">
                    @Html.LabelFor(m => m.ClubName, new { @class = "form-label" })
                    @Html.TextBoxFor(m => m.ClubName, new { @class = "form-control form-control-custom", required = "required", minlength = "3" })
                </div>
                <div class="col-md-3 form-group">
                    @Html.LabelFor(m => m.EventStartDateAndTime, new { @class = "form-label" })
                    @Html.TextBoxFor(m => m.EventStartDateAndTime, "{0:yyyy-MM-ddTHH:mm}", new { @type = "datetime-local", @class = "form-control form-control-custom" })
                </div>
                <div class="col-md-3 form-group">
                    @Html.LabelFor(m => m.EventEndDateAndTime, new { @class = "form-label" })
                    @Html.TextBoxFor(m => m.EventEndDateAndTime, "{0:yyyy-MM-ddTHH:mm}", new { @type = "datetime-local", @class = "form-control form-control-custom" })
                </div>

                <!-- Row 2 -->
                <div class="col-md-12 form-group">
                    @Html.LabelFor(m => m.EventDescription, new { @class = "form-label" })
                    @Html.TextAreaFor(m => m.EventDescription, new { @class = "form-control form-control-custom", rows = 3 })
                </div>

                <!-- Row 3 -->
                <div class="col-md-6 form-group">
                    <label for="EventPosterFile" class="form-label">Event Poster (Image)</label>
                    <input type="file" name="EventPosterFile" id="EventPosterFile" class="form-control form-control-custom" accept="image/*" />
                    @if (!string.IsNullOrEmpty(Model.EventPoster))
                    {
                        <div class="image-preview mt-1">
                            <img src="@Model.EventPoster" alt="Event Poster" />
                        </div>
                    }
                </div>
                <div class="col-md-6 form-group">
                    <label for="EventBannerFile" class="form-label">Event Banner (Image)</label>
                    <input type="file" name="EventBannerFile" id="EventBannerFile" class="form-control form-control-custom" accept="image/*" />
                    @if (!string.IsNullOrEmpty(Model.EventBanner))
                    {
                        <div class="image-preview mt-1">
                            <img src="@Model.EventBanner" alt="Event Banner" />
                        </div>
                    }
                </div>

                <!-- Row 4 -->
                <div class="col-md-4 form-group">
                    @Html.LabelFor(m => m.Venue, new { @class = "form-label" })
                    @Html.TextBoxFor(m => m.Venue, new { @class = "form-control form-control-custom", required = "required", minlength = "3" })
                </div>
                <div class="col-md-4 form-group">
                    @Html.LabelFor(m => m.RegistrationURL, new { @class = "form-label" })
                    @Html.TextBoxFor(m => m.RegistrationURL, new { @class = "form-control form-control-custom", required = "required", type = "url" })
                </div>
                <div class="col-md-4 form-group">
                    @Html.LabelFor(m => m.OrganizerName, new { @class = "form-label" })
                    @Html.TextBoxFor(m => m.OrganizerName, new { @class = "form-control form-control-custom", required = "required", minlength = "3" })
                </div>

                <!-- Submit -->
                <div class="col-md-12 text-center mt-3">
                    <button type="submit" class="btn btn-primary btn-submit">Submit Event</button>
                </div>
            </div>
        }

        @if (ViewBag.Message != null)
        {
            <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                @ViewBag.Message
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const form = document.getElementById("postEventForm");

            const fields = {
                clubName: document.getElementById("ClubName"),
                venue: document.getElementById("Venue"),
                organizerName: document.getElementById("OrganizerName"),
                regUrl: document.getElementById("RegistrationURL"),
                poster: document.getElementById("EventPosterFile"),
                banner: document.getElementById("EventBannerFile"),
            };

            const messages = {};
            for (const key in fields) {
                const field = fields[key];
                const msgEl = document.createElement("div");
                msgEl.className = "text-danger small mt-1";
                field.parentElement.appendChild(msgEl);
                messages[key] = msgEl;
            }

            // Live validation
            fields.clubName.addEventListener("input", () => validateText(fields.clubName, messages.clubName, "Club Name"));
            fields.venue.addEventListener("input", () => validateText(fields.venue, messages.venue, "Venue"));
            fields.organizerName.addEventListener("input", () => validateText(fields.organizerName, messages.organizerName, "Organizer Name"));
            fields.regUrl.addEventListener("input", () => validateUrl(fields.regUrl, messages.regUrl));
            fields.poster.addEventListener("change", () => validateImage(fields.poster, 960, 1280, "Poster", messages.poster));
            fields.banner.addEventListener("change", () => validateImage(fields.banner, 1472, 832, "Banner", messages.banner));

            form.addEventListener("submit", async function (e) {
                const results = await Promise.all([
                    validateText(fields.clubName, messages.clubName, "Club Name"),
                    validateText(fields.venue, messages.venue, "Venue"),
                    validateText(fields.organizerName, messages.organizerName, "Organizer Name"),
                    validateUrl(fields.regUrl, messages.regUrl),
                    validateImage(fields.poster, 960, 1280, "Poster", messages.poster),
                    validateImage(fields.banner, 1472, 832, "Banner", messages.banner)
                ]);

                if (!results.every(r => r)) {
                    e.preventDefault(); // ❌ only stop if invalid
                }
            });

            function validateText(field, msgEl, label) {
                if (!field.value || field.value.trim().length < 3) {
                    msgEl.textContent = `${label} must be at least 3 characters.`;
                    return false;
                }
                msgEl.textContent = "";
                return true;
            }

            function validateUrl(field, msgEl) {
                try {
                    new URL(field.value);
                    msgEl.textContent = "";
                    return true;
                } catch {
                    msgEl.textContent = "Please enter a valid Registration URL.";
                    return false;
                }
            }

            function validateImage(input, requiredWidth, requiredHeight, label, msgEl) {
                return new Promise(resolve => {
                    const file = input.files[0];
                    if (!file) {
                        msgEl.textContent = `${label} image is required.`;
                        resolve(false);
                        return;
                    }
                    const validTypes = ["image/jpeg", "image/png", "image/jpg", "image/webp"];
                    if (!validTypes.includes(file.type)) {
                        msgEl.textContent = `${label} must be JPG, JPEG, PNG, or WEBP format.`;
                        resolve(false);
                        return;
                    }
                    if (file.size > 1024 * 1024) {
                        msgEl.textContent = `${label} must be ≤ 1MB.`;
                        resolve(false);
                        return;
                    }
                    const img = new Image();
                    const url = URL.createObjectURL(file);
                    img.onload = function () {
                        URL.revokeObjectURL(url);
                        if (img.naturalWidth !== requiredWidth || img.naturalHeight !== requiredHeight) {
                            msgEl.textContent = `${label} must be exactly ${requiredWidth}×${requiredHeight}px.`;
                            resolve(false);
                        } else {
                            msgEl.textContent = "";
                            resolve(true);
                        }
                    };
                    img.onerror = () => {
                        msgEl.textContent = "Invalid image file.";
                        resolve(false);
                    };
                    img.src = url;
                });
            }
        });
    </script>
}


@model WebApplication4.Models.EVENT
@{
    Layout = "~/Views/Shared/_ClubAdminLayout.cshtml";
    ViewBag.Title = "Request a Club";
}

<style>
    html, body {
        margin: 0;
        padding: 15px;
        height: 100vh;
        box-sizing: border-box;
        overflow: hidden;
    }

    .form-container {
        max-width: 100%;
        max-height: calc(100vh - 34px);
        padding: 0px 10px 10px;
        display: flex;
        flex-direction: column;
    }

    .card {
        flex: 1;
        overflow-y: auto;
        padding: 20px;
        margin-bottom: 10px;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    .form-group {
        margin-bottom: 6px;
    }

    input, select, textarea {
        font-size: 14px;
        padding: 5px;
    }

    .btn {
        padding: 6px 10px;
    }

    .error-message {
        color: red;
        font-size: 12px;
        margin-top: 2px;
        display: none;
    }

    .is-invalid {
        border-color: red !important;
    }

    @@media (max-width: 768px) {
        .form-container {
            padding: 3px 5px 5px;
        }

        .card {
            padding: 15px;
            margin-bottom: 5px;
        }

        .form-group {
            margin-bottom: 4px;
        }

        input, select, textarea {
            padding: 4px;
        }

        .btn {
            padding: 5px 8px;
        }
    }
</style>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
}

<div class="container mt-1 form-container">
    <div class="card shadow-lg p-3">
        <h4 class="text-center text-primary mb-2">Request an Event</h4>

        <form id="eventForm" action="@Url.Action("RequestEvent", "ClubAdmin")" method="post" enctype="multipart/form-data" onsubmit="return validateForm(event)">
            @Html.AntiForgeryToken()

            <input type="hidden" name="EventOrganizerID" value="@Model.EventOrganizerID" />

            <div class="row g-1">
                <div class="col-md-4 form-group">
                    <label>Organizer Name:</label>
                    <input type="text" class="form-control bg-light" value="@ViewBag.OrganizerName" readonly />
                </div>

                <div class="col-md-4 form-group">
                    <label>Club Name:</label>
                    <input type="text" class="form-control bg-light" value="@Model.ClubName" readonly />
                </div>

                <div class="col-md-4 form-group">
                    <label>Department:</label>
                    <input type="text" class="form-control bg-light" value="@Model.Department" readonly />
                </div>

                <div class="col-md-4 form-group">
                    <label>University:</label>
                    <input type="text" class="form-control bg-light" value="@Model.University" readonly />
                </div>

                <div class="col-md-4 form-group">
                    <label>Event Name:</label>
                    <input type="text" name="EventName" id="EventName" class="form-control" required />
                    <div id="EventNameError" class="error-message"></div>
                </div>
                <div class="col-md-4 form-group">
                    <label>Event Venue:</label>
                    <input type="text" name="Venue" id="Venue" class="form-control" required />
                    <div id="VenueError" class="error-message"></div>
                </div>

                <div class="col-md-12 form-group">
                    <label>Event Description:</label>
                    <textarea name="EventDescription" id="EventDescription" class="form-control" rows="2" required></textarea>
                    <div id="EventDescriptionError" class="error-message"></div>
                </div>

                <div class="col-md-4 form-group">
                    <label>Event Type:</label>
                    <select name="EventType" id="EventType" class="form-select" required>
                        <option value="">Select Type</option>
                        <option value="Open" @(Model.EventType == "Open" ? "selected" : "")>Open</option>
                        <option value="Campus" @(Model.EventType == "Campus" ? "selected" : "")>Campus</option>
                    </select>
                    <div id="EventTypeError" class="error-message"></div>
                </div>

                <div class="col-md-4 form-group">
                    <label>Start Date & Time:</label>
                    <input type="datetime-local"
                           name="EventStartDateAndTime"
                           id="EventStartDateAndTime"
                           class="form-control"
                           required
                           min="@DateTime.Now.ToString("yyyy-MM-ddTHH:mm")" />
                    <div id="EventStartDateAndTimeError" class="error-message"></div>
                </div>


                <div class="col-md-4 form-group">
                    <label>End Date & Time:</label>
                    <input type="datetime-local" name="EventEndDateAndTime" id="EventEndDateAndTime" class="form-control" required />
                    <div id="EventEndDateAndTimeError" class="error-message"></div>
                </div>

                <div class="col-md-4 form-group">
                    <label>Event Poster:</label>
                    <input type="file" name="EventPoster" id="EventPoster" class="form-control" required accept="image/png,image/jpeg,image/jpg,image/webp" />
                    <div id="EventPosterError" class="error-message"></div>
                </div>

                <div class="col-md-4 form-group">
                    <label>Event Budget:</label>
                    <input type="text" name="EventBudget" id="EventBudget" class="form-control" required />
                    <div id="EventBudgetError" class="error-message"></div>
                </div>

                <div class="col-md-4 form-group">
                    <label for="BudgetDocument">Upload Event Document with Budget</label>
                    <input type="file" name="BudgetDocument" id="BudgetDocument" class="form-control" accept=".pdf,.xls,.xlsx" />
                    <div id="BudgetDocumentError" class="error-message"></div>
                </div>
                <div class="col-md-12 text-center mt-1">
                    <button type="submit" class="btn btn-primary">Submit Event</button>
                </div>
            </div>
        </form>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        document.getElementById('EventName').addEventListener('input', validateEventName);
        document.getElementById('EventDescription').addEventListener('input', validateEventDescription);
        document.getElementById('EventType').addEventListener('change', validateEventType);
        document.getElementById('EventStartDateAndTime').addEventListener('input', validateStartDateTime);
        document.getElementById('EventEndDateAndTime').addEventListener('input', validateEndDateTime);
        document.getElementById('EventPoster').addEventListener('change', validateEventPoster);
        document.getElementById('BudgetDocument').addEventListener('change', validateBudgetDocument);
        document.getElementById('Venue').addEventListener('input', validateVenue);
        document.getElementById('EventBudget').addEventListener('input', function () {
            formatAndValidateBudget(this);
        });
    });

    function showError(id, message) {
        const errorEl = document.getElementById(id + "Error");
        const inputEl = document.getElementById(id);
        errorEl.innerText = message;
        errorEl.style.display = "block";
        inputEl.classList.add("is-invalid");
    }

    function clearError(id) {
        const errorEl = document.getElementById(id + "Error");
        const inputEl = document.getElementById(id);
        errorEl.innerText = "";
        errorEl.style.display = "none";
        inputEl.classList.remove("is-invalid");
    }

    function validateEventName() {
        const value = document.getElementById("EventName").value.trim();
        if (value === "") {
            showError("EventName", "Event name is required.");
            return false;
        }
        clearError("EventName");
        return true;
    }

    function validateVenue() {
        const value = document.getElementById("Venue").value.trim();
        if (value === "") {
            showError("Venue", "Event venue is required.");
            return false;
        }
        clearError("Venue");
        return true;
    }

    function validateEventDescription() {
        const value = document.getElementById("EventDescription").value.trim();
        if (value === "") {
            showError("EventDescription", "Event description is required.");
            return false;
        }
        clearError("EventDescription");
        return true;
    }

    function validateEventType() {
        const value = document.getElementById("EventType").value;
        if (value === "") {
            showError("EventType", "Please select an event type.");
            return false;
        }
        clearError("EventType");
        return true;
    }

    function validateStartDateTime() {
        const value = document.getElementById("EventStartDateAndTime").value;
        if (!value) {
            showError("EventStartDateAndTime", "Start date and time is required.");
            return false;
        }
        clearError("EventStartDateAndTime");
        return true;
    }

    function validateEndDateTime() {
        const value = document.getElementById("EventEndDateAndTime").value;
        const start = document.getElementById("EventStartDateAndTime").value;
        if (!value) {
            showError("EventEndDateAndTime", "End date and time is required.");
            return false;
        }
        if (start && value <= start) {
            showError("EventEndDateAndTime", "End time must be after start time.");
            return false;
        }
        clearError("EventEndDateAndTime");
        return true;
    }

    function validateEventPoster() {
        const input = document.getElementById("EventPoster");
        const file = input.files[0];

        if (!file) {
            showError("EventPoster", "Please upload an event poster.");
            return false;
        }

        const validTypes = ["image/jpeg", "image/png", "image/jpg", "image/webp"];
        if (!validTypes.includes(file.type)) {
            showError("EventPoster", "Only JPG, JPEG, PNG, or WEBP files are allowed.");
            return false;
        }

        // ✅ Only size validation (1 MB)
        if (file.size > 1 * 1024 * 1024) {
            showError("EventPoster", "Poster size must be less than or equal to 1 MB.");
            return false;
        }

        clearError("EventPoster");
        return true;
    }

    function formatAndValidateBudget(input) {
        let rawValue = input.value.replace(/,/g, '').trim();
        const errorId = "EventBudget";

        if (!rawValue) {
            showError(errorId, "Event budget is required.");
            return false;
        }

        if (!/^\d+$/.test(rawValue)) {
            showError(errorId, "Please enter digits only (e.g., 23000).");
            return false;
        }

        input.value = parseInt(rawValue).toLocaleString("en-IN");
        clearError(errorId);
        return true;
    }

    function validateBudgetDocument() {
        const input = document.getElementById("BudgetDocument");
        const file = input.files[0];
        if (!file) {
            clearError("BudgetDocument"); // optional field
            return true;
        }

        const allowedTypes = [
            "application/pdf",
            "application/vnd.ms-excel",
            "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        ];

        // ✅ Only size validation (2 MB)
        if (!allowedTypes.includes(file.type)) {
            showError("BudgetDocument", "Only PDF, XLS, or XLSX allowed.");
            return false;
        }

        if (file.size > 2 * 1024 * 1024) {
            showError("BudgetDocument", "Document must be less than or equal to 2 MB.");
            return false;
        }

        clearError("BudgetDocument");
        return true;
    }

    function validateForm(event) {
        let valid = true;
        valid &= validateEventName();
        valid &= validateVenue();
        valid &= validateEventDescription();
        valid &= validateEventType();
        valid &= validateStartDateTime();
        valid &= validateEndDateTime();
        valid &= validateEventPoster();
        valid &= formatAndValidateBudget(document.getElementById("EventBudget"));
        valid &= validateBudgetDocument();

        if (!valid) {
            event.preventDefault();
            return false;
        }
        return true;
    }
</script>


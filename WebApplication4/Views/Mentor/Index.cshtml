@using Newtonsoft.Json
@{
    Layout = "~/Views/Shared/_MentorLayout.cshtml";
    ViewBag.Title = "Mentor Dashboard";
    var clubNames = ViewBag.ClubNames as List<string> ?? new List<string> { "No Clubs" };
    var eventCounts = ViewBag.EventCounts as List<int> ?? new List<int> { 0 };
    var pendingEventCounts = ViewBag.PendingEventCounts as List<int> ?? eventCounts.Select(x => x / 2).ToList();
}

<div class="container mt-3">
    <div class="row">
        <!-- Left Column: Mentor Info -->
        <div class="col-lg-4 col-md-12 mb-4">
            <!-- Mentor Info Card -->
            <div class="card shadow-lg border-0 hover-card h-100 mentor-card">
                <div class="card-body text-center position-relative">
                    <!-- Bell Button -->
                    <button class="btn btn-icon position-absolute top-0 end-0 m-2" type="button" id="notificationsButton" data-bs-toggle="modal" data-bs-target="#notificationsModal">
                        <i class="fas fa-bell fa-lg text-primary"></i>
                        @{
                            var notifications = ViewBag.Notifications as List<WebApplication4.Models.Notification>;
                            if (notifications != null && notifications.Count > 0)
                            {
                                <span class="badge bg-danger position-absolute top-0 start-100 translate-middle rounded-pill">@notifications.Count</span>
                            }
                        }
                    </button>
                    <!-- Avatar -->
                    <div class="avatar-circle mx-auto mb-3">
                        <i class="fas fa-user fa-2x text-white"></i>
                    </div>
                    <h4 class="card-title text-primary mb-2">@ViewBag.MentorFullName</h4>
                    <div class="text-left">
                        <p class="mb-2"><i class="fas fa-envelope me-2 text-primary"></i><strong>Email:</strong> @ViewBag.Mentor.Email</p>
                        <p class="mb-2"><i class="fas fa-university me-2 text-primary"></i><strong>University:</strong> @ViewBag.University.UniversityNAME</p>
                        <p class="mb-2"><i class="fas fa-map-marker-alt me-2 text-primary"></i><strong>Location:</strong> @ViewBag.University.Location</p>
                        <p class="mb-2"><i class="fas fa-building me-2 text-primary"></i><strong>Department:</strong> @ViewBag.Department.DepartmentName</p>
                        <p class="mb-2"><i class="fas fa-users me-2 text-primary"></i><strong>Total Clubs:</strong> @ViewBag.ClubsCount</p>
                        <p class="mb-2"><i class="fas fa-calendar-check me-2 text-primary"></i><strong>Total Events:</strong> @ViewBag.EventsCount</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Right Column: Chart -->
        <div class="col-lg-8 col-md-12 mb-4">
            <div class="card shadow-sm p-4 border-0 h-100 chart-card">
                <h4 class="text-center mb-2">Clubs and Their Events</h4>
                <div class="chart-container">
                    <canvas id="clubEventChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Notifications Modal -->
<div class="modal fade" id="notificationsModal" tabindex="-1" aria-labelledby="notificationsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="notificationsModalLabel">Notifications</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @{
                    if (notifications != null && notifications.Count > 0)
                    {
                        <ul class="list-unstyled" id="notificationList">
                            @foreach (var notification in notifications)
                            {
                                <li class="notification-item mb-3" data-notification-id="@notification.NotificationID">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <span>@notification.Message</span>
                                        <small class="text-muted">@(notification.StartDate?.ToString("MMM dd, yyyy") ?? "N/A")</small>
                                    </div>
                                    <hr class="dropdown-divider my-2">
                                </li>
                            }
                        </ul>
                        <div class="text-center">
                            <form id="clearNotificationsForm" action="@Url.Action("ClearAllNotifications", "Mentor")" method="post">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="text-danger text-decoration-none border-0 bg-transparent">Clear All Notifications</button>
                            </form>
                        </div>
                    }
                    else
                    {
                        <p class="text-center text-muted" id="notificationList">No notifications available.</p>
                    }
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        :root {
            --primary-gradient-start: #4a00e0;
            --primary-gradient-end: #8e2de2;
            --secondary-color: #f7f9fc;
            --text-primary: #2d2d2d;
            --text-secondary: #6c757d;
            --accent-color: #ff6f61;
            --shadow-color: rgba(0, 0, 0, 0.15);
        }

        .mentor-card {
            background: linear-gradient(145deg, var(--secondary-color), #ffffff);
            border-radius: 16px;
            overflow: hidden;
            position: relative;
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .hover-card {
            transition: transform 0.4s ease, box-shadow 0.4s ease;
        }

        .hover-card:hover {
            transform: translateY(-8px) scale(1.03);
            box-shadow: 0 12px 24px var(--shadow-color) !important;
        }

        .avatar-circle {
            width: 80px;
            height: 80px;
            background: linear-gradient(135deg, var(--primary-gradient-start), var(--primary-gradient-end));
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            border: 2px solid #ffffff;
        }

        .card-title {
            font-weight: 700;
            font-size: 1.5rem;
            letter-spacing: 0.8px;
            color: var(--primary-gradient-start);
        }

        .card-body {
            padding: 2.5rem;
            background: linear-gradient(180deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0));
        }

        .card-body p {
            font-size: 0.95rem;
            color: var(--text-secondary);
            line-height: 1.6;
            transition: color 0.3s ease;
        }

        .card-body p:hover {
            color: var(--text-primary);
        }

        .card-body p strong {
            color: var(--text-primary);
            font-weight: 600;
        }

        .btn-icon {
            background: transparent;
            border: none;
            padding: 0.5rem;
            transition: transform 0.3s ease, color 0.3s ease;
        }

        .btn-icon:hover {
            transform: scale(1.2);
            color: var(--primary-gradient-end);
        }

        .badge.bg-danger {
            background-color: var(--accent-color) !important;
            transform: scale(0.9);
            transition: transform 0.3s ease;
        }

        .badge.bg-danger:hover {
            transform: scale(1);
        }

        .notification-item {
            transition: background-color 0.3s ease;
        }

        .notification-item:hover {
            background-color: var(--secondary-color);
        }

        .modal-content {
            border-radius: 10px;
            box-shadow: 0 6px 16px var(--shadow-color);
        }

        .chart-card {
            background: linear-gradient(145deg, #ffffff, var(--secondary-color));
            border-radius: 16px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            position: relative;
            overflow: hidden;
        }

        .chart-card h4 {
            font-weight: 700;
            color: var(--text-primary);
            font-size: 1.6rem;
            letter-spacing: 0.5px;
            position: relative;
        }

        .chart-card h4::after {
            content: '';
            position: absolute;
            bottom: -5px;
            left: 50%;
            transform: translateX(-50%);
            width: 50px;
            height: 3px;
            background: linear-gradient(90deg, var(--primary-gradient-start), var(--primary-gradient-end));
            border-radius: 2px;
        }

        .chart-container {
            position: relative;
            width: 100%;
            height: 450px;
            overflow: hidden;
            border-radius: 12px;
            background: rgba(255, 255, 255, 0.8);
        }

        #clubEventChart {
            width: 100% !important;
            height: 450px !important;
            display: block !important;
        }

        @@media (max-width: 991px) {
            .col-lg-4, .col-lg-8 {
                margin-bottom: 2rem;
            }

            .avatar-circle {
                width: 65px;
                height: 65px;
            }

            .avatar-circle i {
                font-size: 1.8rem;
            }

            .card-body {
                padding: 1.8rem;
            }

            .card-title {
                font-size: 1.3rem;
            }

            .btn-icon {
                padding: 0.4rem;
            }

            .chart-container, #clubEventChart {
                height: 320px;
            }

            .chart-card h4 {
                font-size: 1.4rem;
            }
        }
    </style>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js"></script>
    <script>
        // Chart.js local fallback
        if (typeof Chart === 'undefined') {
            console.error('Chart.js not loaded from CDN. Attempting local fallback.');
            document.write('<script src="/Scripts/chart.umd.min.js"><\/script>');
        }

        document.addEventListener('DOMContentLoaded', function () {
            // Debug notifications button
            const notificationsButton = document.getElementById('notificationsButton');
            if (notificationsButton) {
                notificationsButton.addEventListener('click', function () {
                    console.log('Notifications button clicked');
                    const modal = document.getElementById('notificationsModal');
                    if (modal) {
                        console.log('Modal found in DOM');
                    } else {
                        console.error('Modal #notificationsModal not found in DOM');
                    }
                });
            } else {
                console.error('Notifications button #notificationsButton not found in DOM');
            }

            // Handle clear notifications form submission
            const clearForm = document.getElementById('clearNotificationsForm');
            if (clearForm) {
                clearForm.addEventListener('submit', function (e) {
                    e.preventDefault();
                    console.log('Clear Notifications form submitted');
                    fetch(clearForm.action, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    })
                    .then(response => {
                        console.log('Response status:', response.status);
                        if (!response.ok) {
                            return response.text().then(text => {
                                throw new Error(`HTTP ${response.status}: ${text.substring(0, 100)}...`);
                            });
                        }
                        return response.json();
                    })
                    .then(data => {
                        if (data.success) {
                            console.log('Notifications cleared successfully');
                            // Update UI
                            const notificationList = document.getElementById('notificationList');
                            notificationList.innerHTML = '<p class="text-center text-muted">No notifications available.</p>';
                            const badge = document.querySelector('.badge.bg-danger');
                            if (badge) badge.remove();
                        } else {
                            console.error('Failed to clear notifications:', data.message);
                            alert('Error clearing notifications: ' + data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Error clearing notifications:', error);
                        alert('Error clearing notifications. Check console for details.');
                    });
                });
            }

            // Debug data for chart
            const clubLabelsRaw = '@Html.Raw(JsonConvert.SerializeObject(clubNames))';
            const eventDataRaw = '@Html.Raw(JsonConvert.SerializeObject(eventCounts))';
            console.log('Raw Club Labels:', clubLabelsRaw);
            console.log('Raw Event Data:', eventDataRaw);

            let clubLabels, eventData;
            try {
                clubLabels = JSON.parse(clubLabelsRaw);
                eventData = JSON.parse(eventDataRaw);
            } catch (e) {
                console.error('JSON Parse Error:', e.message);
                clubLabels = ['No Clubs'];
                eventData = [0];
            }

            console.log('Parsed Club Labels:', clubLabels, 'Type:', typeof clubLabels);
            console.log('Parsed Event Data:', eventData, 'Type:', typeof eventData);
            console.log('Club Labels Length:', clubLabels.length, 'Event Data Length:', eventData.length);

            // Validate data
            let validLabels = Array.isArray(clubLabels) && clubLabels.length > 0 ? clubLabels : ['No Clubs'];
            let validData = Array.isArray(eventData) && eventData.length > 0 && eventData.every(v => v != null && !isNaN(v) && v >= 0) ? eventData : [0];

            if (validLabels.length !== validData.length) {
                console.warn('Data mismatch: Labels and data lengths differ. Adjusting to minimum length.');
                const minLength = Math.min(validLabels.length, validData.length);
                validLabels = validLabels.slice(0, minLength);
                validData = validData.slice(0, minLength);
                console.log('Adjusted Labels:', validLabels);
                console.log('Adjusted Data:', validData);
            }

            const ctx = document.getElementById('clubEventChart');
            if (!ctx) {
                console.error('Canvas element #clubEventChart not found in DOM.');
                alert('Error: Chart canvas not found. Please check the page structure.');
                return;
            }

            try {
                new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: validLabels,
                        datasets: [{
                            label: 'All Events',
                            data: validData,
                            backgroundColor: 'rgba(74, 0, 224, 0.6)',
                            borderColor: 'rgba(74, 0, 224, 1)',
                            borderWidth: 1,
                            hoverBackgroundColor: 'rgba(142, 45, 226, 0.8)',
                            hoverBorderColor: 'rgba(142, 45, 226, 1)'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        animation: {
                            duration: 1200,
                            easing: 'easeInOutCubic'
                        },
                        plugins: {
                            legend: {
                                display: true,
                                position: 'top',
                                labels: {
                                    font: {
                                        size: 13,
                                        weight: 'bold'
                                    },
                                    color: '#2d2d2d'
                                }
                            },
                            tooltip: {
                                backgroundColor: 'rgba(74, 0, 224, 0.9)',
                                titleFont: { size: 14, weight: 'bold' },
                                bodyFont: { size: 12 },
                                callbacks: {
                                    label: function(context) {
                                        return `${context.label}: ${context.raw} events`;
                                    }
                                }
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                title: {
                                    display: true,
                                    text: 'Event Count',
                                    font: { size: 14, weight: 'bold' },
                                    color: '#2d2d2d'
                                },
                                grid: {
                                    color: 'rgba(0, 0, 0, 0.05)',
                                    borderColor: '#2d2d2d'
                                },
                                ticks: {
                                    color: '#2d2d2d',
                                    font: { size: 12 }
                                }
                            },
                            x: {
                                title: {
                                    display: true,
                                    text: 'Clubs',
                                    font: { size: 14, weight: 'bold' },
                                    color: '#2d2d2d'
                                },
                                grid: {
                                    display: false
                                },
                                ticks: {
                                    color: '#2d2d2d',
                                    font: { size: 12 }
                                }
                            }
                        }
                    }
                });
                console.log('Chart initialized successfully.');
            } catch (error) {
                console.error('Error initializing chart:', error.message, error.stack);
                alert('Error rendering chart. Check console for details.');
            }

            // Mark Notifications as Read (unchanged)
            const notificationsModal = document.getElementById('notificationsModal');
            if (notificationsModal) {
                console.log('Notifications modal found on page load');
                notificationsModal.addEventListener('shown.bs.modal', function () {
                    console.log('Notifications modal shown');
                    const notificationItems = document.querySelectorAll('.notification-item');
                    notificationItems.forEach(item => {
                        const notificationId = item.getAttribute('data-notification-id');
                        if (notificationId) {
                            fetch('@Url.Action("MarkNotificationAsRead", "Mentor")', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                                },
                                body: JSON.stringify({ notificationId: parseInt(notificationId) })
                            })
                            .then(response => response.json())
                            .then(data => {
                                if (data.success) {
                                    console.log(`Notification ${notificationId} marked as read.`);
                                } else {
                                    console.error(`Failed to mark notification ${notificationId} as read: ${data.message}`);
                                }
                            })
                            .catch(error => console.error('Error marking notification as read:', error));
                        }
                    });
                });
            } else {
                console.error('Notifications modal #notificationsModal not found on page load');
            }
        });
    </script>
}